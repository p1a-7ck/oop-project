<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--
    in appender-section defined output options
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
    in appender-section defined output options
    -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>..\logs\oop.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd_HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>..\logs\oop.%i.log.zip</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>5</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>1MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--
    logger defines what appender will be used to exact NAMED logger in class / LoggerFactory.getLogger(name);
    when you defines name by SomeClass.class for .getLogger() you will get SomeClass name with full path (packages),
    so you should define name for logger in configuration same as SomeClass.class;
    to divide output for each type of log-messages, you should use different named Loggers in your code, and
    create two logger-section with desired name defining;
    in this example we made name by concatenating '.class.getName()' and '.WARN';
    -->
    <logger name="com.epam.java.rt.lab.task.star.system.service.Analyzer.WARN" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </logger>

    <!--
    logger defines what appender will be used to exact NAMED logger in class / LoggerFactory.getLogger(name);
    in this example we made name by concatenating '.class.getName()' and '.INFO';
    so Logger('.WARN') outputs to 'STDOUT'-appender and to 'FILE;-appender,
    but Logger('.INFO') outputs only to 'STDOUT'-appender;
    -->
    <logger name="com.epam.java.rt.lab.task.star.system.service.Analyzer.INFO" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>


    <logger name="LOGGER" level="TRACE" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <!--
    root defines what appender will be used to output log-message as default, as a result all log-messages wil appear
    in 'STDOUT'-appender
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
    </root>

</configuration>